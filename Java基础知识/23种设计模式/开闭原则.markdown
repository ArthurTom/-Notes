### 开闭原则
#### 基本介绍
    1. 类，模块和函数应该对扩展外开放（提供方），对修改关闭（对使用方），用抽象构建框架，用实现扩展细节。
    2. 当软件需要改变时，尽量通过扩展软件实体的行为来实现变化，而不是通过修改已有的代码来实现变化。
#### 改进前
```
public class ShapeType {
	int shapeTypeNum; // 绘制的图形
}
```
```
public class DrawCircle extends ShapeType {
	public DrawCircle() {
		super.shapeTypeNum = 1;
	}
}
```
```
public class DrawRect extends ShapeType {
	public DrawRect() {
		super.shapeTypeNum = 2;
	}
}
```
```
public class DrawShape {
	public void draw(ShapeType shapeType) {
		if (shapeType.shapeTypeNum == 1)
			System.out.println("绘制圆形");
		else if (shapeType.shapeTypeNum == 2)
			System.out.println("绘制矩形"); // 如果我要加入一个绘制其他的图形，这里需要新增一个判断，然后要新加一个类
	}
}
```
```
public class OpenClosePrinciple {
	public static void main(String[] args) {
		DrawShape mDrawShape = new DrawShape();
		mDrawShape.draw(new DrawCircle());
		mDrawShape.draw(new DrawRect());
	}
}

```

#### 改进后
```
public abstract class ShapeType {
	public abstract void draw(); // 抽象方法
}

```
```
public class DrawCircle extends ShapeType {
	@Override
	public void draw() {
		System.out.println("绘制圆形");
	}
}
```
```
public class DrawRect extends ShapeType {
	@Override
	public void draw() {
		System.out.println("绘制矩形");
	}
}
```
```
public class DrawShape {
	public void draw(ShapeType shapeType) {
		shapeType.draw();// 这里不再判断，而是使用抽象类的子类的重写方法
	}
}
```
```
public class OpenClosePrinciple {
	public static void main(String[] args) {
		DrawShape mDrawShape = new DrawShape();
		mDrawShape.draw(new DrawCircle());
		mDrawShape.draw(new DrawRect());
	}
}
```

<font color=red>思路：</font>把创建的ShapeType做成抽象类，然后新增一个抽象的方法draw()，让子类实现即可。这样有新的图形种类时，只需要让新的图形集成ShapeType,并实现draw()方法即可，这样使用方的代码就不需要更修改。
